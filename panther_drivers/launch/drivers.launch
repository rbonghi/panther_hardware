<?xml version="1.0"?>
<!--
Copyright (C) 2020, Raffaello Bonghi <raffaello@rnext.it>
All rights reserved
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright 
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. Neither the name of the copyright holder nor the names of its 
   contributors may be used to endorse or promote products derived 
   from this software without specific prior written permission.
 
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-->
<launch>

  <!-- All nodes are loaded in same namespace 
       Drivers:
        - Roboteq
        - rplidar
        - razor_imu
        - jetson_stats
        - audio
        - ZED
        - body (LEDs and Ultrasounds)
        - joystick
        This node load hardware diagnostic system
        - Diagnostic
       -->
  <arg name="diagnostic"      default="false" />
  <!-- Drivers -->
  <arg name="motors"          default="true" />
  <arg name="lidar"           default="true" />
  <arg name="zed"             default="true" />
  <arg name="body"            default="true" />
  <arg name="joystick"        default="true" />
  <arg name="scan_processing" default="false" />
  <!-- Machine definition:
        - local (Run all node in current machine)
        - remote (Run all node in a remote address)
       -->
  <arg name="machine"         default="local" />
  <!-- Output
        - screen
        - log
       -->
  <arg name="output"          default="log" />

  <!-- Machine definition -->
  <include file="$(find panther_machine)/$(arg machine).machine" />
  <!-- Load robot description -->
  <include file="$(find panther_description)/launch/description.launch" />
  <!-- Diagnostic -->
  <group if="$(arg diagnostic)">
    <include file="$(find panther_drivers)/launch/diagnostic.launch" />
  </group>
  <!-- Motors -->
  <group if="$(arg motors)">
    <include file="$(find roboteq_control)/launch/roboteq.launch">
      <arg name="port"        value="/dev/roboteq" />
      <arg name="config"      value="$(find panther_drivers)/config/roboteq.yaml" />
      <arg name="respawn"     value="true" />
      <arg name="output"      value="$(arg output)" />
      <arg name="machine"     value="panther" />
    </include>
  </group>
  <group unless="$(arg motors)">
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" output="$(arg output)" />
  </group>
  <!-- Jetson-stats -->
  <node machine="panther" pkg="ros_jetson_stats" type="jetson_stats.py" name="ros_jetson_stats">
    <rosparam command="load" file="$(find panther_drivers)/config/jetson_stats.yaml" />
  </node>
  <!-- IMU -->
  <include file="$(find panther_drivers)/launch/driver/razor_imu.launch">
    <arg name="output"        value="$(arg output)" />
    <arg name="machine"       value="panther" />
  </include>
  <!-- Audio controller -->
  <include file="$(find panther_drivers)/launch/driver/audio.launch">
    <arg name="machine"       value="panther" />
  </include>
  <!-- RP Lidar -->
  <group if="$(arg lidar)">
    <include file="$(find panther_drivers)/launch/driver/rplidar.launch">
      <arg name="output"        value="$(arg output)" />
      <arg name="machine"         value="panther" />
    </include>
  </group>
  <!-- ZED camera -->
  <group if="$(arg zed)">
    <include file="$(find panther_drivers)/launch/driver/zed_camera.launch">
      <arg name="camera_name"      value="zed2" />
      <arg name="camera_model"     value="zed2" />
      <arg name="node_name"        value="zed" />
      <arg name="scan_processing"  value="$(arg scan_processing)" />
      <arg name="output"           value="$(arg output)" />
      <arg name="machine"          value="panther" />
    </include>
  </group>
  <!-- Panther body (Leds, Ultrasounds) -->
  <group if="$(arg body)">
    <include file="$(find panther_body)/launch/body.launch">
      <arg name="twist"      value="velocity_controller/cmd_vel" />
      <arg name="e_stop"     value="roboteq/emergency_stop" />
      <arg name="enable"     value="enable" />
      <arg name="output"     value="$(arg output)" />
      <arg name="machine"    value="panther" />
    </include>
  </group>
  <!-- Launch joystick bridge to control:
        - sound
        - leds
       -->
  <group if="$(arg joystick)">
    <include file="$(find panther_joystick)/launch/joystick.launch">
      <arg name="output"        value="$(arg output)" />
      <arg name="machine"       value="panther" />
    </include>
  </group>
</launch>
